import java.util.Collections;

class Solution { 
    private class TrieNode{
        HashMap<Character, TrieNode> children;
        boolean endOfWord;
        
        public TrieNode(){
            children = new HashMap<>();
            endOfWord = false;
        }
        
    } 
    
    private TrieNode root;
    
    //Inserts word into trie
        
    public void insert(String word){

        TrieNode current = root;
        
        for(int j=0; j<word.length();j++){
            char ch = word.charAt(j);
            TrieNode node = current.children.get(ch);
                
            if(node == null){
                node = new TrieNode();
                current.children.put(ch, node);
            }
            current = node;   
        }
        current.endOfWord = true;
    }
        
    //Returns if the word is in trie
    
    public boolean search(String word){
        
        TrieNode current = root;

        for(int j=0; j<word.length();j++){
            char ch = word.charAt(j);
            TrieNode node = current.children.get(ch);
            
            if(node == null){
                return false;
            }
            current = node;     
        }
        return current.endOfWord;
    }
        
    public String longestWord(String[] words) {
        
        root = new TrieNode();
        int flag;
        
        for(String word:words){
            insert(word);
        }
        
        Arrays.sort(words, Collections.reverseOrder());
        Arrays.sort(words, Comparator.comparingInt(String::length));
        
        for(int i=words.length - 1;i>=0;i--){
            flag = 0;
            for(int j= words[i].length() - 1; j>0;j--){
                
                String s = words[i].substring(0,j);
                
                if(!search(s)){
                    flag= 1;
                    break;
                }   
            }
            if(flag == 0)
                return words[i];
        }
        return "";
    }
}
